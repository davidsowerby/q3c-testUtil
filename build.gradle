/*
 *
 *  * Copyright (c) 2016. David Sowerby
 *  *
 *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 *  * the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *  *
 *  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 *  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *  * specific language governing permissions and limitations under the License.
 *
 */


buildscript {
    repositories {
        jcenter()
        mavenLocal()
    }

    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.5'
        classpath 'commons-io:commons-io:2.4'
        classpath 'uk.q3c:q3c-gradle:0.7.3'
    }
}


apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'java'
apply plugin: 'project-report'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'
apply plugin: 'q3c-release'


description = 'Generic test utilities'
group = 'uk.q3c'
version = '0.8.0'

ext.assertjVersion = '3.3.0'
ext.commonsLangVersion = '3.3.2'
ext.groovyVersion = '2.4.1'
ext.guavaVersion = '19.0'
ext.slf4jVersion = '1.7.6'


ext.versionDescription = 'No version description provided'
ext.releaseDate = new Date()

sourceCompatibility = '1.8'



repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

dependencies {
//	compile 'uk.q3c.krail:krail:0.9.8'

    //logging
    compile 'org.slf4j:slf4j-api:' + slf4jVersion
    compile 'ch.qos.logback:logback-classic:1.1.2'
    compile 'ch.qos.logback:logback-core:1.1.2'
    //groovy
    compile 'org.codehaus.groovy:groovy-all:' + groovyVersion

    //utility
    compile 'com.google.guava:guava:' + guavaVersion
    compile 'org.apache.commons:commons-lang3:' + commonsLangVersion
    compile 'commons-io:commons-io:2.4'

    //Testing
    compile 'com.google.code.findbugs:annotations:3.0.0'
    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:' + assertjVersion
    testCompile 'org.assertj:assertj-guava:1.3.1'
    testCompile 'com.mycila:mycila-guice:2.10.ga'
    testCompile 'com.mycila.testing.plugins:mycila-testing-guice:2.8'
    testCompile 'com.mycila.testing.plugins:mycila-testing-mockito:2.8'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile 'org.spockframework:spock-guice:1.0-groovy-2.4'

}

//bintray {
//    dryRun = false
//}

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}

publishing {
    publications {
        mavenStuff(MavenPublication) {
            from components.java

            artifact sourcesJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }
        }
    }
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

javadoc {
    failOnError = false
}

task verifyRelease(type: uk.q3c.gradle.VerificationTask) {

}

task prepareRelease(type: uk.q3c.gradle.PrepareReleaseTask) {

}

task release(type: uk.q3c.gradle.ReleaseTask) {

}

bintray {
    user = 'dsowerby'
    try {
        key = bintrayKey
    }
    catch (Exception e) {
        println 'Bintray key not found, not on push platform'
        //do nothing
    }

    publications = ['mavenStuff'] //When uploading Maven-based publication files
    dryRun = true  //project.ext.bintrayDryRun //Whether to run this as dry-run, without deploying
    publish = true //If version should be auto published after an upload
    pkg {
        repo = 'maven'
//        userOrg = 'myorg' //An optional organization name when the repo belongs to one of the user's orgs
        name = project.name
        desc = project.description
        websiteUrl = 'https://github.com/davidsowerby/' + project.name
        issueTrackerUrl = websiteUrl + '/issues'
        vcsUrl = websiteUrl + '.git'
        licenses = ['Apache-2.0']
        labels = ['vaadin', 'guice']
        publicDownloadNumbers = true
        //Optional version descriptor
        version {
            name = project.version
            desc = project.ext.versionDescription
            released = project.ext.releaseDate
            //'optional, date of the version release' //2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
            mavenCentralSync {
                sync = false //Optional (true by default). Determines whether to sync the version to Maven Central.
            }
        }
    }
}

def versionFromFile(File projectRoot) {
    def Properties props = new Properties()
    def propFile = new File(projectRoot, 'version.properties')
    if (propFile.canRead()) {
        props.load(new FileInputStream(propFile))
    }
    String key = "CURRENT_VERSION"
    println(projectRoot.getName() + ": version is " + props[key])
    props[key]
}




